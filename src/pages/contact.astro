---
import BaseLayout from '../layouts/BaseLayout.astro';
import { fetchContactPage } from '../utils/sanity';
import PageTitle from '../components/shared/PageTitle.astro';
import PageDescription from '../components/shared/PageDescription.astro';

const accessKey = import.meta.env.WEB3FORMS_ACCESS_KEY;

const vm = await fetchContactPage();
---

<BaseLayout>

  <PageTitle title={vm.title} />
  
  <PageDescription>
    <p>{vm.description}</p>
    <p>mail@norfolksuffolkwsd.org.uk</p>
    <p>Add physical location...</p>
  </PageDescription>

  <div class="panel">

    <!-- Contact Form -->
    <form id="form" novalidate>
      <p>{vm.description}</p>
      <br>
      <input type="hidden" name="access_key" value={accessKey} />
      <input type="checkbox" class="hidden" style="display:none" name="botcheck" />


      <!-- Name Field -->
      <div class="form-group">
        <label for="name">Name</label>
        <input
          id="name"
          type="text"
          name="name"
          required
          aria-describedby="name-feedback"
        />
      </div>

      <div class="form-group">
        <label for="email">Way of contacting you</label>
        <input
          id="email"
          type="text"
          placeholder="Email Address or phone number for us to get in touch"
          name="email"
          required
          aria-describedby="email-feedback"
        />
      </div>

      <!-- Message Field -->
      <div class="form-group">
        <label for="message">Message</label>
        <textarea
          id="message"
          name="message"
          required
          aria-describedby="message-feedback"
        ></textarea>
      </div>

      <!-- Submit Button -->
      <button class="btn btn--primary" type="submit">Send Message</button>
      <div id="result" class="result" aria-live="polite"></div>
    </form>
  </div>
</BaseLayout>

<style>

  /* TODO: Move this out to global */
  .panel {
    background-color: var(--bg-light);
    padding: 1rem;
    border-radius: 8px;
  }

  .btn {}

  .btn--primary {
    background-color: var(--accent);
    color: white;
  }

  #form {
    max-width: 700px;
    margin: 0 auto;
    padding: 1rem;
  }
  .form-group {
    margin-bottom: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }

  input, textarea, button {
    display: block;
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 1rem;
  }

  textarea {
    resize: vertical;
    min-height: 100px;
  }

  .feedback {
    color: #dc3545; /* Red for errors */
    display: none;
  }

  .is-invalid + .feedback {
    display: block;
  }

  .result {
    margin-top: 1rem;
    font-size: 1rem;
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("form");
    const result = document.getElementById("result");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      form.classList.add("was-validated");

      if (!form.checkValidity()) {
        form.querySelectorAll(":invalid")[0].focus();
        return;
      }

      const formData = new FormData(form);
      const data = Object.fromEntries(formData);

      result.textContent = "Sending...";
      result.className = "result"; // Reset feedback class

      try {
        const response = await fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });

        const json = await response.json();
        if (response.ok) {
          result.classList.add("success");
          result.textContent = json.message || "Message sent successfully!";
        } else {
          result.classList.add("error");
          result.textContent = json.message || "Failed to send message.";
        }
      } catch (error) {
        console.error(error);
        result.classList.add("error");
        result.textContent = "Something went wrong!";
      } finally {
        form.reset();
        form.classList.remove("was-validated");
        setTimeout(() => (result.textContent = ""), 5000);
      }
    });
  });
</script>
