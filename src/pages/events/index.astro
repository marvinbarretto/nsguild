---
import type { EventType } from "../../utils/types";
import { fetchAllEvents } from "../../sanity/queries/event";
import BaseLayout from "../../layouts/BaseLayout.astro";
import DateDisplay from "../../components/shared/DateDisplay.astro";
import { isToday } from "../../utils/dates";
const events: EventType[] = await fetchAllEvents();
// console.log("Fetched Events:", JSON.stringify(events, null, 2));

import { portableTextToPlainText } from "../../utils/portableText";


import ListItem from "../../components/shared/ListItem.astro";


const today = new Date().toISOString().split("T")[0]; // Get today's date
console.log("Fetched Events:", events.map(e => ({ title: e.title, date: e.date })));

// Separate upcoming & past events
const upcomingEvents = events.filter(event => event.date >= today);
const pastEvents = events.filter(event => event.date < today);

// Sort events
upcomingEvents.sort((a, b) => a.date.localeCompare(b.date));
pastEvents.sort((a, b) => b.date.localeCompare(a.date)); 

---
<BaseLayout>
  <div class="container">
    <h1>Events</h1>

    <section class="upcoming">
      <ul class="upcoming__list">
        {upcomingEvents.length > 0 ? (
          upcomingEvents.map((event) => (
  
            <ListItem
              title={event.title}
              date={event.date}
              dateVariant="calendar"
              linkThroughToPage={false}
              slug={event.slug}
              description={Array.isArray(event.description) ? portableTextToPlainText(event.description) : event.description} 
  
              basePath="/events"
            />
  
          ))
        ) : (
          <p>No upcoming events.</p>
        )}
      </ul>
    </section>
  
    <section class="past">
      <h2 class="past__heading">Past Events</h2>
      <ul class="past__list">
        {pastEvents.length > 0 ? (
          pastEvents.map((event) => (
            <ListItem
              title={event.title}
              date={event.date}
              slug={event.slug}
              description={Array.isArray(event.description) ? portableTextToPlainText(event.description) : event.description} 
              dateVariant="calendar"
              linkThroughToPage={true}
              basePath="/events"
            />
          ))
        ) : (
          <p>No past events.</p>
        )}
      </ul>
    </section>
  </div>

</BaseLayout>


<style lang="scss">

  .container {
    display: flex;
    flex-direction: column;
  }

  .upcoming, .past {
    margin-bottom: 2rem;
  }

  .past__heading {
    margin-bottom: 1rem;
  }

  .upcoming__list, .past__list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

</style>
