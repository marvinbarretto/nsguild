---
import BaseLayout from "../layouts/BaseLayout.astro";
import { fetchHomepage } from "../sanity/queries/homepage";
import { fetchGlobals } from "../utils/sanity";
import { fetchNextEvent } from "../sanity/queries/event";
import { fetchLatestNews } from "../sanity/queries/news";

import PortableText from "../components/shared/PortableText.astro";
import Seo from "../components/shared/Seo.astro";
import Banner from '../components/global/Banner.astro';
import HeroOverlaySection from "../components/homepage/HeroOverlaySection.astro";
import AsideCard from "../components/homepage/AsideCard.astro";

import type { EventType } from "../utils/types";
import type { Post } from "../utils/types";
import { buildTitle } from "../utils/meta";
import { imageBuilder } from "../sanity/lib/images";
import { getEventTiming } from "../utils/dates";

const vm = await fetchHomepage();
const globals = await fetchGlobals();

const firstImage = vm.carouselImages?.[0]; // pass full image object, not just .asset
const preloadImage = firstImage && {
  url: imageBuilder.image(firstImage).width(1200).format("webp").url(),
  srcSet: `
    ${imageBuilder.image(firstImage).width(400).url()} 400w,
    ${imageBuilder.image(firstImage).width(800).url()} 800w,
    ${imageBuilder.image(firstImage).width(1200).url()} 1200w
  `,
  sizes: "100vw",
  type: "image/webp"
};

const title = buildTitle("Home");
const nextEvent: EventType | null = await fetchNextEvent();
const latestNews: Post | null = await fetchLatestNews();

---

<Seo
  title={title}
  description={globals?.description}
  preloadImage={preloadImage}
/>

<BaseLayout>
  <Banner />
  <HeroOverlaySection images={vm.carouselImages} />
  <div class="container-over-hero">
    <div class="content">
      <div class="primary">
        {vm.whoWeAre && (
          <section id="who-we-are">
            <div class="panel-content">
              <h2>Who We Are</h2>
              <PortableText portableText={vm.whoWeAre} />
            </div>
          </section>
        )}
        <aside>
          {nextEvent && (
            <AsideCard
              heading="Next Event"
              badge={getEventTiming(nextEvent.date).label}
              date={nextEvent.date}>
                <h2>{nextEvent.title}</h2>
                <PortableText portableText={nextEvent.description} />
            </AsideCard>
          )}

          {latestNews && (
            <AsideCard heading="For your diary">
              <h2>{latestNews.title}</h2>
              <PortableText portableText={latestNews.body} />
            </AsideCard>
          )}
        </aside>
      </div>
      <div class="secondary">
        {vm.whatWeDo && (
          <section id="what-we-do">
            <div class="panel-content">
              <h2>What We Do</h2>
              <PortableText portableText={vm.whatWeDo} />
            </div>
          </section>
        )}
        {vm.whenWeMeet && (
          <section id="when-we-meet">
            <div class="panel-content">
              <h2>When We Meet</h2>
              <PortableText portableText={vm.whenWeMeet} />
            </div>
          </section>
        )}
        {vm.whereWeMeet && (
          <section id="where-we-meet">
            <div class="panel-content">
              <h2>Where We Meet</h2>
              <PortableText portableText={vm.whereWeMeet} />
            </div>
          </section>
        )}
      </div>
    </div>
  </div>
</BaseLayout>

<style scoped lang="scss">
  @use "../styles/_breakpoints.scss" as *;
  @use "../styles/_mixins" as *;

  .container-over-hero {
    position: relative;
    margin-top: -100px;
    display: flex;
    justify-content: center;
  }

  .content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 2rem 1rem;
    max-width: 1200px;

    .primary {
      display: flex;
      flex-direction: column-reverse;
      gap: 1rem;
      @media (min-width: $BREAKPOINT_MEDIUM) {
        flex-direction: row;
        section { flex: 2; }
        aside { flex: 1; }
      }
    }
    .secondary {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      @media (min-width: $BREAKPOINT_MEDIUM) {
        flex-direction: row;
        section { flex: 1; }
      }
    }
  }

  section {
    @include panel;
  }
  aside {
    display: flex;
    gap: 1rem;
    flex-direction: column;
    @media (min-width: $BREAKPOINT_SMALL) {
      flex-direction: row;
    }
    @media (min-width: $BREAKPOINT_MEDIUM) {
      flex-direction: column;
    }
  }
  .panel-content {
    @include panel-border;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: .5rem;
  }
</style>
